def usr(robot):
	import struct
	import math
	import timeit
	import time

## I just want to note a couple of things at the start:
## 1. The standard approach turned out immensly better than the smoothed approach
## 2. There are two separate sections for the smoothed and standard approach as when I tried to comment out only specific
## lines in order to be able to switch between the approaches it messed up th standard approach
## 3. The smoothed approach seems to not develop coordinates on the far left side of the stage (x = 0)
## 4. This is likely due to the use of for loops and inability to get an exact number of neighbors and gradients as a result
## 5. I could not find a way send and recieve messages without putting them in loops
## 7. The code fully executes in about 40 seconds
## 6. I'm very proud of the standard approach result, that is all

######### START HOP COUNT CODE ############

	hop_count = [40,40]

	# there are a lot of for loops here because i found that sometimes messages wouldn't be recieved after several iterations
	# so to be safe we have a lot of iterations

	# this first for loop is solely for the first gradient propagation from robots 1 and 2 to their initial neighbors
	for j in range(0,500):

		# if the robot is 1 send  out a message of hop = 1 to neighbors and its ids
		if robot.assigned_id == 1:
			hop_count = [0,0]
			robot.set_led(100,0,0)
			robot.send_msg(struct.pack('ii',hop_count[0]+1,robot.assigned_id))
		
		elif robot.assigned_id == 0:
			msgs = robot.recv_msg()

			if len(msgs) > 0:
				broadcast = struct.unpack('ii',msgs[0][:8]) 
				if broadcast[1] == 1:
					hop_count[0] = broadcast[0]

	for j in range(0,500):

		#if robot is 2 send out a message of hop = 1 to neighbors and its id
		if robot.assigned_id == 2:
			hop_count = [0,0]
			robot.set_led(100,0,0)
			robot.send_msg(struct.pack('ii',hop_count[0]+1,robot.assigned_id))
			
		elif robot.assigned_id == 0:
			msgs = robot.recv_msg()

			if len(msgs) > 0:
				broadcast = struct.unpack('ii',msgs[0][:8]) 
				if broadcast[1] == 2:
					hop_count[1] = broadcast[0]

# this for loop is for all subsequent 0 robots and their gradient propogation
# outer for loop is for recving dif seed messages
	for seed in range(0,2):
# for cycling through hop counts
		for mat in range(1,21):
# for making sure all robots that can recv a msg recv a msg
			for j in range(0,250):
# if the robot is the hop count iteration send its hop count to neighbors
				if hop_count[seed] == mat:
					robot.send_msg(struct.pack('ii',hop_count[seed]+1,robot.assigned_id))
				else:
					msgs = robot.recv_msg()
					if len(msgs) > 0:
						broadcast = struct.unpack('ii',msgs[0][:8]) 
# if the robot recvs a message and its hop is lower than the recvd hop do nothing
						if broadcast[0] > hop_count[seed]:
							pass
# otherwise reassign the hop 
						else:
							hop_count[seed] = broadcast[0]

## visual represenation of hop gradient propogating through the swarm		
	# if hop_count[0] % 2 == 0:
	# 	robot.set_led(100,0,0)
		
	# else:
	# 	robot.set_led(0,100,0)

############### HOP COUNT (GRADIENTS) ESTABLISHED ##################
####################################################################
############### START COORDINATE GENERATION ########################

 ## Approximate 1 hop distance to be 2 (arbitray # -> units dont matter)
 ## so d_hat = hop_count * 2

############### STANDARD APPROACH ##################

# 	scale = 2
# 	d_hat = [hop_count[0] * scale, hop_count[1] *scale]
# 	#pos1 = [0,0]
# 	pos2 = [15*scale,0] # seed to is 15 hops away from seed 1 - by inspection
# 	Ej = 100
# 	lse_x = 0
# 	lse_y = 0
# # hieght and width of the 'scene'
# 	upboundX = 15*scale + 1
# 	upboundY = 18*scale + 1
# 	pos = [0,0]

# 	# finding sensor j's total error
# 	# set the max x value to be 15*scale and the max y value to be 18*scale

# 	for x in range(0,upboundX):
# 		for y in range(0,upboundY):

# # math given in paper 11 to minimize error and find estimated x and y coords
# 			dj1 = math.sqrt(x**2 + y**2)
# 			dj2 = math.sqrt((x-pos2[0])**2 + y**2)

# 			Ej1 = (dj1 - d_hat[0])**2
# 			Ej2 = (dj2 - d_hat[1])**2

# 			Ej_new = sum([Ej1,Ej2]) 

# 			if Ej_new < Ej:
# 				Ej = Ej_new
# 				lse_x = x
# 				lse_y = y
# 				pos = [lse_x,lse_y]

# ## now we need to specify the coordinates for the northwestern N
# ## doing this in a separate python file because dockers python doesn't support PIL

# 	coords_in_N= [[0, 0], [0, 1], [0, 3], [0, 4], [0, 5], [0, 7], [0, 9], [0, 10], [0, 11], [0, 13], [0, 14], [0, 15], [0, 17], [0, 19], [0, 20], [0, 21], [0, 23], [0, 24], [0, 25], [0, 26], [0, 28], [0, 29], [0, 30], [0, 32], [0, 33], [0, 34], [1, 1], [1, 2], [1, 3], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 11], [1, 12], [1, 13], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 21], [1, 22], [1, 24], [1, 26], [1, 27], [1, 28], [1, 30], [1, 31], [1, 32], [1, 34], [1, 35], [2, 0], [2, 1], [2, 2], [2, 4], [2, 5], [2, 6], [2, 8], [2, 9], [2, 10], [2, 11], [2, 13], [2, 14], [2, 15], [2, 16], [2, 18], [2, 19], [2, 20], [2, 21], [2, 22], [2, 23], [2, 24], [2, 25], [2, 26], [2, 28], [2, 29], [2, 30], [2, 32], [2, 33], [2, 35], [3, 0], [3, 2], [3, 3], [3, 4], [3, 6], [3, 7], [3, 9], [3, 11], [3, 13], [3, 17], [3, 19], [3, 22], [3, 24], [3, 26], [3, 27], [3, 28], [3, 30], [3, 31], [3, 33], [3, 34], [4, 1], [4, 2], [4, 4], [4, 5], [4, 7], [4, 8], [4, 9], [4, 10], [4, 11], [4, 23], [4, 24], [4, 25], [4, 27], [4, 29], [4, 30], [4, 31], [4, 32], [4, 34], [4, 35], [5, 0], [5, 1], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 9], [5, 11], [5, 12], [5, 13], [5, 25], [5, 26], [5, 27], [5, 28], [5, 29], [5, 31], [5, 32], [5, 33], [5, 35], [6, 0], [6, 1], [6, 2], [6, 3], [6, 5], [6, 7], [6, 8], [6, 9], [6, 10], [6, 11], [6, 13], [6, 26], [6, 27], [6, 29], [6, 30], [6, 32], [6, 33], [6, 34], [6, 35], [7, 1], [7, 2], [7, 4], [7, 5], [7, 6], [7, 7], [7, 9], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 28], [7, 29], [7, 30], [7, 31], [7, 33], [7, 35], [8, 2], [8, 3], [8, 4], [8, 6], [8, 8], [8, 9], [8, 10], [8, 12], [8, 14], [8, 15], [8, 16], [8, 17], [8, 28], [8, 30], [8, 31], [8, 32], [8, 33], [8, 34], [9, 3], [9, 5], [9, 6], [9, 7], [9, 8], [9, 10], [9, 11], [9, 12], [9, 13], [9, 14], [9, 16], [9, 18], [9, 29], [9, 31], [9, 33], [9, 34], [9, 35], [10, 4], [10, 5], [10, 6], [10, 8], [10, 9], [10, 11], [10, 13], [10, 15], [10, 16], [10, 17], [10, 18], [10, 19], [10, 31], [10, 32], [11, 6], [11, 7], [11, 8], [11, 9], [11, 10], [11, 11], [11, 12], [11, 13], [11, 14], [11, 15], [11, 17], [11, 19], [11, 20], [12, 7], [12, 9], [12, 11], [12, 13], [12, 15], [12, 16], [12, 17], [12, 18], [12, 19], [12, 21], [12, 22], [13, 8], [13, 9], [13, 10], [13, 11], [13, 12], [13, 13], [13, 14], [13, 16], [13, 17], [13, 19], [13, 20], [13, 21], [13, 23], [14, 10], [14, 11], [14, 13], [14, 14], [14, 15], [14, 17], [14, 18], [14, 19], [14, 21], [14, 22], [14, 23], [14, 24], [15, 11], [15, 12], [15, 14], [15, 15], [15, 16], [15, 17], [15, 19], [15, 20], [15, 21], [15, 22], [15, 24], [15, 25], [15, 26], [16, 12], [16, 13], [16, 15], [16, 17], [16, 18], [16, 20], [16, 22], [16, 23], [16, 25], [16, 27], [17, 13], [17, 14], [17, 15], [17, 16], [17, 18], [17, 19], [17, 20], [17, 21], [17, 23], [17, 24], [17, 25], [17, 26], [17, 27], [18, 15], [18, 16], [18, 17], [18, 19], [18, 21], [18, 22], [18, 23], [18, 24], [18, 26], [18, 27], [18, 28], [18, 29], [18, 30], [19, 1], [19, 3], [19, 16], [19, 17], [19, 18], [19, 19], [19, 20], [19, 21], [19, 22], [19, 24], [19, 25], [19, 27], [19, 29], [19, 31], [20, 0], [20, 1], [20, 2], [20, 3], [20, 4], [20, 5], [20, 18], [20, 20], [20, 22], [20, 23], [20, 25], [20, 26], [20, 27], [20, 28], [20, 29], [20, 30], [20, 31], [21, 0], [21, 1], [21, 3], [21, 4], [21, 6], [21, 7], [21, 18], [21, 19], [21, 20], [21, 21], [21, 23], [21, 24], [21, 25], [21, 27], [21, 29], [21, 31], [21, 32], [21, 33], [22, 1], [22, 2], [22, 4], [22, 5], [22, 6], [22, 7], [22, 20], [22, 21], [22, 22], [22, 23], [22, 25], [22, 26], [22, 27], [22, 28], [22, 29], [22, 30], [22, 31], [22, 33], [22, 34], [23, 0], [23, 2], [23, 3], [23, 5], [23, 7], [23, 8], [23, 9], [23, 21], [23, 23], [23, 24], [23, 26], [23, 28], [23, 29], [23, 31], [23, 32], [23, 33], [23, 34], [23, 35], [24, 0], [24, 1], [24, 2], [24, 3], [24, 4], [24, 5], [24, 6], [24, 8], [24, 9], [24, 10], [24, 22], [24, 23], [24, 24], [24, 25], [24, 26], [24, 27], [24, 29], [24, 30], [24, 32], [24, 34], [25, 1], [25, 3], [25, 5], [25, 6], [25, 7], [25, 9], [25, 11], [25, 12], [25, 24], [25, 26], [25, 27], [25, 28], [25, 30], [25, 31], [25, 32], [25, 33], [25, 34], [25, 35], [26, 0], [26, 1], [26, 2], [26, 3], [26, 4], [26, 6], [26, 7], [26, 8], [26, 9], [26, 10], [26, 11], [26, 13], [26, 15], [26, 16], [26, 18], [26, 20], [26, 22], [26, 24], [26, 25], [26, 27], [26, 28], [26, 29], [26, 30], [26, 32], [26, 34], [27, 0], [27, 2], [27, 4], [27, 5], [27, 7], [27, 9], [27, 11], [27, 12], [27, 13], [27, 14], [27, 16], [27, 17], [27, 18], [27, 19], [27, 21], [27, 22], [27, 23], [27, 24], [27, 25], [27, 26], [27, 28], [27, 30], [27, 31], [27, 32], [27, 33], [27, 35], [28, 1], [28, 2], [28, 3], [28, 4], [28, 5], [28, 6], [28, 7], [28, 8], [28, 9], [28, 10], [28, 11], [28, 13], [28, 14], [28, 15], [28, 16], [28, 18], [28, 19], [28, 20], [28, 21], [28, 23], [28, 25], [28, 26], [28, 27], [28, 28], [28, 29], [28, 30], [28, 32], [28, 33], [28, 34], [28, 35], [29, 0], [29, 1], [29, 3], [29, 5], [29, 7], [29, 9], [29, 11], [29, 12], [29, 14], [29, 16], [29, 17], [29, 19], [29, 21], [29, 22], [29, 23], [29, 24], [29, 26], [29, 28], [29, 30], [29, 31], [29, 33], [29, 35]]

# # the coordinates found from mu python code were flipped for some reason so here I'm unflipping it
# 	for i in range(0,len(coords_in_N)):
# 		coords_in_N[i][0] = 29 - coords_in_N[i][0]

# 	for c in range(0,len(coords_in_N)):
# 		if (coords_in_N[c][0]) <= pos[0] <= (coords_in_N[c][0]+1) and (coords_in_N[c][1]) <= pos[1] <= (coords_in_N[c][1]) \
# 			or pos[0] <= 2 or pos[0] >=28:
# 			robot.set_led(0,100,0)

################ END STANDARD APPROACH ##################
#########################################################
################## SMOOTHED APPROACH ####################

	nbrs = [0,0]
	sum_h = [0,0]
	si = [0,0]
	scale = 2
	d_hat = [hop_count[0] * scale, hop_count[1] *scale]
	#pos1 = [0,0]
	pos2 = [15*scale,0] # seed to is 15 hops away from seed 1 - by inspection
	Ej = 100
	lse_x = 0
	lse_y = 0
	upboundX = 15*scale + 1
	upboundY = 18*scale + 1
	pos = [0,0]

	for i in range(0,250):
		robot.send_msg(struct.pack('ii',hop_count[0],hop_count[1]))

		msgs = robot.recv_msg()

	# math to get the smoothed gradient distance
		if len(msgs) > 0:
			broadcast = struct.unpack('ii',msgs[0][:8])
			sum_h[0] += broadcast[0]*scale
			nbrs[0] += 1
			sum_h[1] += broadcast[1] *scale
			nbrs[1] += 1

	# si is the communication radius found using smoothing approach
	si[0] = (sum_h[0] + d_hat[0])/(nbrs[0] + 1) - 0.5
	si[1] = (sum_h[1] + d_hat[1])/(nbrs[1] + 1) - 0.5

	# finding sensor j's total error
	# set the max x value to be 15*scale and the max y value to be 18*scale

	for x in range(0,upboundX):
		for y in range(0,upboundY):

			dj1 = math.sqrt(x**2 + y**2)
			dj2 = math.sqrt((x-pos2[0])**2 + y**2)

			Ej1 = (dj1 - si[0])**2
			Ej2 = (dj2 - si[1])**2

			Ej_new = sum([Ej1,Ej2]) 

			if Ej_new < Ej:
				Ej = Ej_new
				lse_x = x
				lse_y = y
				pos = [lse_x,lse_y]

## now we need to specify the coordinates for the northwestern N
## doing this in a separate python file because dockers python doesn't support PIL

	coords_in_N= [[0, 0], [0, 1], [0, 3], [0, 4], [0, 5], [0, 7], [0, 9], [0, 10], [0, 11], [0, 13], [0, 14], [0, 15], [0, 17], [0, 19], [0, 20], [0, 21], [0, 23], [0, 24], [0, 25], [0, 26], [0, 28], [0, 29], [0, 30], [0, 32], [0, 33], [0, 34], [1, 1], [1, 2], [1, 3], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 11], [1, 12], [1, 13], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 21], [1, 22], [1, 24], [1, 26], [1, 27], [1, 28], [1, 30], [1, 31], [1, 32], [1, 34], [1, 35], [2, 0], [2, 1], [2, 2], [2, 4], [2, 5], [2, 6], [2, 8], [2, 9], [2, 10], [2, 11], [2, 13], [2, 14], [2, 15], [2, 16], [2, 18], [2, 19], [2, 20], [2, 21], [2, 22], [2, 23], [2, 24], [2, 25], [2, 26], [2, 28], [2, 29], [2, 30], [2, 32], [2, 33], [2, 35], [3, 0], [3, 2], [3, 3], [3, 4], [3, 6], [3, 7], [3, 9], [3, 11], [3, 13], [3, 17], [3, 19], [3, 22], [3, 24], [3, 26], [3, 27], [3, 28], [3, 30], [3, 31], [3, 33], [3, 34], [4, 1], [4, 2], [4, 4], [4, 5], [4, 7], [4, 8], [4, 9], [4, 10], [4, 11], [4, 23], [4, 24], [4, 25], [4, 27], [4, 29], [4, 30], [4, 31], [4, 32], [4, 34], [4, 35], [5, 0], [5, 1], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 9], [5, 11], [5, 12], [5, 13], [5, 25], [5, 26], [5, 27], [5, 28], [5, 29], [5, 31], [5, 32], [5, 33], [5, 35], [6, 0], [6, 1], [6, 2], [6, 3], [6, 5], [6, 7], [6, 8], [6, 9], [6, 10], [6, 11], [6, 13], [6, 26], [6, 27], [6, 29], [6, 30], [6, 32], [6, 33], [6, 34], [6, 35], [7, 1], [7, 2], [7, 4], [7, 5], [7, 6], [7, 7], [7, 9], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 28], [7, 29], [7, 30], [7, 31], [7, 33], [7, 35], [8, 2], [8, 3], [8, 4], [8, 6], [8, 8], [8, 9], [8, 10], [8, 12], [8, 14], [8, 15], [8, 16], [8, 17], [8, 28], [8, 30], [8, 31], [8, 32], [8, 33], [8, 34], [9, 3], [9, 5], [9, 6], [9, 7], [9, 8], [9, 10], [9, 11], [9, 12], [9, 13], [9, 14], [9, 16], [9, 18], [9, 29], [9, 31], [9, 33], [9, 34], [9, 35], [10, 4], [10, 5], [10, 6], [10, 8], [10, 9], [10, 11], [10, 13], [10, 15], [10, 16], [10, 17], [10, 18], [10, 19], [10, 31], [10, 32], [11, 6], [11, 7], [11, 8], [11, 9], [11, 10], [11, 11], [11, 12], [11, 13], [11, 14], [11, 15], [11, 17], [11, 19], [11, 20], [12, 7], [12, 9], [12, 11], [12, 13], [12, 15], [12, 16], [12, 17], [12, 18], [12, 19], [12, 21], [12, 22], [13, 8], [13, 9], [13, 10], [13, 11], [13, 12], [13, 13], [13, 14], [13, 16], [13, 17], [13, 19], [13, 20], [13, 21], [13, 23], [14, 10], [14, 11], [14, 13], [14, 14], [14, 15], [14, 17], [14, 18], [14, 19], [14, 21], [14, 22], [14, 23], [14, 24], [15, 11], [15, 12], [15, 14], [15, 15], [15, 16], [15, 17], [15, 19], [15, 20], [15, 21], [15, 22], [15, 24], [15, 25], [15, 26], [16, 12], [16, 13], [16, 15], [16, 17], [16, 18], [16, 20], [16, 22], [16, 23], [16, 25], [16, 27], [17, 13], [17, 14], [17, 15], [17, 16], [17, 18], [17, 19], [17, 20], [17, 21], [17, 23], [17, 24], [17, 25], [17, 26], [17, 27], [18, 15], [18, 16], [18, 17], [18, 19], [18, 21], [18, 22], [18, 23], [18, 24], [18, 26], [18, 27], [18, 28], [18, 29], [18, 30], [19, 1], [19, 3], [19, 16], [19, 17], [19, 18], [19, 19], [19, 20], [19, 21], [19, 22], [19, 24], [19, 25], [19, 27], [19, 29], [19, 31], [20, 0], [20, 1], [20, 2], [20, 3], [20, 4], [20, 5], [20, 18], [20, 20], [20, 22], [20, 23], [20, 25], [20, 26], [20, 27], [20, 28], [20, 29], [20, 30], [20, 31], [21, 0], [21, 1], [21, 3], [21, 4], [21, 6], [21, 7], [21, 18], [21, 19], [21, 20], [21, 21], [21, 23], [21, 24], [21, 25], [21, 27], [21, 29], [21, 31], [21, 32], [21, 33], [22, 1], [22, 2], [22, 4], [22, 5], [22, 6], [22, 7], [22, 20], [22, 21], [22, 22], [22, 23], [22, 25], [22, 26], [22, 27], [22, 28], [22, 29], [22, 30], [22, 31], [22, 33], [22, 34], [23, 0], [23, 2], [23, 3], [23, 5], [23, 7], [23, 8], [23, 9], [23, 21], [23, 23], [23, 24], [23, 26], [23, 28], [23, 29], [23, 31], [23, 32], [23, 33], [23, 34], [23, 35], [24, 0], [24, 1], [24, 2], [24, 3], [24, 4], [24, 5], [24, 6], [24, 8], [24, 9], [24, 10], [24, 22], [24, 23], [24, 24], [24, 25], [24, 26], [24, 27], [24, 29], [24, 30], [24, 32], [24, 34], [25, 1], [25, 3], [25, 5], [25, 6], [25, 7], [25, 9], [25, 11], [25, 12], [25, 24], [25, 26], [25, 27], [25, 28], [25, 30], [25, 31], [25, 32], [25, 33], [25, 34], [25, 35], [26, 0], [26, 1], [26, 2], [26, 3], [26, 4], [26, 6], [26, 7], [26, 8], [26, 9], [26, 10], [26, 11], [26, 13], [26, 15], [26, 16], [26, 18], [26, 20], [26, 22], [26, 24], [26, 25], [26, 27], [26, 28], [26, 29], [26, 30], [26, 32], [26, 34], [27, 0], [27, 2], [27, 4], [27, 5], [27, 7], [27, 9], [27, 11], [27, 12], [27, 13], [27, 14], [27, 16], [27, 17], [27, 18], [27, 19], [27, 21], [27, 22], [27, 23], [27, 24], [27, 25], [27, 26], [27, 28], [27, 30], [27, 31], [27, 32], [27, 33], [27, 35], [28, 1], [28, 2], [28, 3], [28, 4], [28, 5], [28, 6], [28, 7], [28, 8], [28, 9], [28, 10], [28, 11], [28, 13], [28, 14], [28, 15], [28, 16], [28, 18], [28, 19], [28, 20], [28, 21], [28, 23], [28, 25], [28, 26], [28, 27], [28, 28], [28, 29], [28, 30], [28, 32], [28, 33], [28, 34], [28, 35], [29, 0], [29, 1], [29, 3], [29, 5], [29, 7], [29, 9], [29, 11], [29, 12], [29, 14], [29, 16], [29, 17], [29, 19], [29, 21], [29, 22], [29, 23], [29, 24], [29, 26], [29, 28], [29, 30], [29, 31], [29, 33], [29, 35]]

	for i in range(0,len(coords_in_N)):
		coords_in_N[i][0] = 29 - coords_in_N[i][0]

	for c in range(0,len(coords_in_N)):
		if (coords_in_N[c][0]-0.5) <= pos[0] <= (coords_in_N[c][0]+1) and (coords_in_N[c][1]) <= pos[1] <= (coords_in_N[c][1]) \
			or pos[0] <= 2 or pos[0] >=28:
			robot.set_led(0,100,0)

#################### END SMOOTHED APPROACH ####################